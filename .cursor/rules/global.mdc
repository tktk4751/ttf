---
description: 
globs: *.py
alwaysApply: false
---

alwaysApply: true
---

# 設計とコーディングの基本原則

このドキュメントは、高品質なソフトウェア開発を維持するための設計およびコーディングに関する基本原則を定めます。プロジェクトに参加するすべての開発者は、これらの原則を理解し、遵守することが求められます。

## 1. 設計原則

### 1.1. SOLID原則の遵守
ソフトウェア設計の基本原則であるSOLIDを遵守してください。

-   **単一責任の原則 (SRP: Single Responsibility Principle):**
    -   クラスやモジュールは、ただ一つの責任を持つべきです。変更する理由が複数ある場合、分割を検討してください。
-   **オープン・クローズドの原則 (OCP: Open/Closed Principle):**
    -   ソフトウェアのエンティティ（クラス、モジュール、関数など）は、拡張に対して開かれており、修正に対して閉じていなければなりません。既存のコードを変更せずに機能を追加できるように設計してください。継承やインターフェース、ポリモーフィズムを活用します。
-   **リスコフの置換原則 (LSP: Liskov Substitution Principle):**
    -   サブタイプのオブジェクトは、スーパータイプのオブジェクトが期待される場所で、プログラムの正確性を損なうことなく置換可能でなければなりません。継承は「is-a」関係を正しく表現する場合にのみ使用してください。
-   **インターフェース分離の原則 (ISP: Interface Segregation Principle):**
    -   クライアントは、自身が使用しないメソッドに依存すべきではありません。大きなインターフェースは、より小さく特定のインターフェースに分割してください。
-   **依存性逆転の原則 (DIP: Dependency Inversion Principle):**
    -   上位レベルのモジュールは、下位レベルのモジュールに依存すべきではありません。両方とも抽象（インターフェースや抽象クラス）に依存すべきです。具象ではなく抽象に依存するようにしてください。

### 1.2. クリーンでシンプルな設計
-   **YAGNI (You Ain't Gonna Need It):** 必要になるまで機能を追加しないでください。将来必要になるかもしれないという推測に基づく過剰な設計や実装は避けてください。
-   **KISS (Keep It Simple, Stupid):** シンプルさを追求してください。不必要に複雑な解決策よりも、単純明快な方法を選びます。
-   **凝集度を高め、結合度を低くする:** 関連性の高いコードはまとめ（高凝集）、モジュール間の依存関係は最小限に（低結合）してください。

### 1.3. DRY原則 (Don't Repeat Yourself)
-   同じ知識（ロジック、データ構造、設定など）がシステム内で複数回表現されるべきではありません。
-   コードの重複は、バグの温床となり、変更を困難にします。
-   共通のロジックは関数、メソッド、クラス、モジュールなどに抽出し、再利用してください。
-   設定値や定数は一箇所で管理し、参照するようにしてください。

## 2. コーディング規約

### 2.1. 命名規則
-   **明確かつ簡潔:** 名前は、その変数、関数、クラスなどが何を表すか、何をするかを明確に、かつできるだけ短く表現してください。
-   **一貫性:** プロジェクト内で一貫した命名規則を使用してください。（例: `camelCase`, `PascalCase`, `snake_case`, `UPPER_SNAKE_CASE` を言語や慣習に合わせて使い分ける）
    -   変数/関数/メソッド: `camelCase` または `snake_case` (プロジェクトの慣習に従う)
    -   クラス/インターフェース/型: `PascalCase`
    -   定数: `UPPER_SNAKE_CASE`
-   **意味のある名前:** `a`, `b`, `data`, `info` のような曖昧な名前は避け、具体的な意味を持つ名前を選んでください。
-   **略語:** 広く認知されている略語（例: `URL`, `HTTP`, `ID`）以外は避け、誤解を招く可能性のある独自の略語は使用しないでください。

### 2.2. コードの可読性
-   **インデントとフォーマット:** プロジェクトで合意されたフォーマッタ（例: Prettier, Black, gofmt）を使用し、一貫したコードスタイルを維持してください。
-   **コメント:**
    -   コードの「なぜ」を説明するためにコメントを使用します。「何」をしているかは、コード自体が明確に表現すべきです。
    -   複雑なアルゴリズム、ビジネスロジック、ワークアラウンド（回避策）にはコメントを追加してください。
    -   コメントアウトされたコードは原則として残さず、バージョン管理システムを活用してください。
-   **関数の長さ:** 関数は短く、一つのタスクに集中するようにしてください。一般的に、画面に収まる程度の長さが理想です。
-   **ネストの深さ:** 条件分岐やループのネストは浅く保ち、深くネストする場合はリファクタリング（関数の抽出など）を検討してください。

### 2.3. エラーハンドリング
-   **早期リターン:** エラー条件や不正な入力は関数の早い段階でチェックし、早期にリターンまたは例外をスローしてください。
-   **具体的なエラー:** 汎用的な `Exception` ではなく、可能な限り具体的なエラータイプを使用または定義してください。
-   **例外の握り潰し禁止:** `catch` ブロックで例外を捕捉しても何も処理しない（ログ出力もしない）のは避けてください。少なくともログには記録します。
-   **適切なエラー伝達:** エラーが発生した場合、呼び出し元に適切に伝達するか、回復可能な場合は適切に処理してください。

### 2.4. テスト
-   **ユニットテスト:** 新しい機能や重要なロジックにはユニットテストを作成してください。テストはコードの振る舞いを保証し、リファクタリングを容易にします。
-   **テストカバレッジ:** 単体テストのカバレッジを意識し、重要なパスがテストされていることを確認してください。ただし、カバレッジ率自体を目的としないでください。
-   **テスト容易性:** テストしやすいようにコードを設計してください（例: 依存性の注入）。

### 2.5. その他
-   **バージョン管理:** Gitなどのバージョン管理システムを適切に使用してください。コミットメッセージは明確で分かりやすく記述します（例: Conventional Commits）。
-   **セキュリティ:** SQLインジェクション、クロスサイトスクリプティング（XSS）、機密情報のハードコーディングなどの一般的な脆弱性に注意し、安全なコーディングプラクティスに従ってください。
-   **パフォーマンス:** 不必要な計算、ループ内での非効率な操作、メモリリークなどに注意してください。パフォーマンスが重要な箇所では、測定と最適化を行いますが、早すぎる最適化は避けてください。
-   **コードレビュー:** コードレビューは品質向上のための重要なプロセスです。建設的なフィードバックを提供し、受け入れてください。

---

```